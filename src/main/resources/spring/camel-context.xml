<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:cxf="http://camel.apache.org/schema/cxf"
    xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:sec="http://cxf.apache.org/configuration/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd         http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd 
http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd         http://cxf.apache.org/configuration/security http://cxf.apache.org/schemas/configuration/security.xsd">


    <cxf:rsServer id="rsServer" address="/jaxrs"
        serviceClass="org.jboss.fuse.quickstarts.security.keycloak.cxf.JaxRsService">
           <cxf:providers>
               <ref bean="jsonProvider"/>
           </cxf:providers>
    </cxf:rsServer>
    <bean id="jsonProvider" class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider"/>
    <bean id="getBodyProcessor" class="org.example.GetBodyProcessor" />

    <cxf:cxfEndpoint address="http://${weather.service.host}:8282/WeatherService" id="soap">
        <cxf:outInterceptors>
            <ref bean="wss4jOutInterceptor-saml"/>
            <ref bean="loggingOutInterceptor"/>
        </cxf:outInterceptors>
    </cxf:cxfEndpoint>
    
    <cxf:cxfEndpoint address="http://${weather.service.host}:8283/WeatherService" wsdlURL="/weatherprovider.wsdl" id="sts">
        <cxf:properties>
            <entry key="schema-validation-enabled" value="true"/>
        </cxf:properties>
        <cxf:outInterceptors>
            <ref bean="wss4jOutInterceptor-sts-saml"/>
            <ref bean="loggingOutInterceptor"/>
        </cxf:outInterceptors>
    </cxf:cxfEndpoint>
     
    <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
        <dataFormats>
            <xmljson id="xmljson"/>
        </dataFormats>
        
        <restConfiguration component="servlet" host="localhost" port="8080" bindingMode="auto" clientRequestValidation="true"/>

        <rest id="id-d01f38ae-72ce-41de-877d-6f50f0a9b0ad" path="/jaxrs">

          <post id="id-140a15b5-e0f0-498b-9592-9efd399f17bf" uri="/request/" 
            type="com.ibm.wdata.WeatherRequest"
            outType="com.ibm.wdata.WeatherResponse" 
            consumes="application/json"
            produces="application/json"
            >
            <to uri="direct:weatherRequest"/>
          </post>
        </rest>

        <route id="weatherRequest">
            <from uri="direct:weatherRequest" />
            <process ref="getBodyProcessor"/> 
            <choice id="choiceZipCode">
                <when id="whenZipCode">
                    <simple>${body.zipcode} == "M3H 2J8"</simple>
                    <log loggingLevel="INFO" message="weatherRequest ${headers.Authorization}"/>
                    <to uri="cxf:bean:soap?serviceClass=com.ibm.wdata.WeatherPortType&amp;defaultOperationName=weatherRequest"/>
                    <setHeader headerName="Content-Type">
                        <constant>application/json</constant>
                    </setHeader>
                    <setBody>
                        <simple>${body[0]}</simple>
                    </setBody>

                </when>
                <otherwise id="otherwiseZipCode">
                    <log id="logOtherwise" message="=====will tigger sts" />
                    <to uri="cxf:bean:sts?serviceClass=com.ibm.wdata.WeatherPortType&amp;defaultOperationName=weatherRequest"/>
                    <setHeader headerName="Content-Type">
                        <constant>application/json</constant>
                    </setHeader>
                    <setBody>
                        <simple>${body[0]}</simple>
                    </setBody>
                </otherwise>
            </choice>

        </route>
        <route>
            <from id="_from1" uri="cxfrs:bean:rsServer"/>
            <log id="_log1" message="OAuth incoming ${body}"/>
        </route>
        
    </camelContext>
    <bean class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor" id="wss4jOutInterceptor-saml">
        <constructor-arg>
            <map>
                <entry key="action" value="Timestamp SAMLTokenSigned"/>
                <entry key="user" value="alice"/>
                <entry key="signaturePropFile" value="alice.properties"/>
                <entry key="passwordCallbackClass" value="org.example.KeystorePasswordCallback"/>
                <entry key="samlCallbackRef" value-ref="samlCallbackHandler"/>
            </map>
        </constructor-arg>
    </bean>
    <bean class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor" id="wss4jOutInterceptor-sts-saml">
        <constructor-arg>
            <map>
                <entry key="action" value="Timestamp SAMLTokenUnsigned"/>
                <entry key="user" value="alice"/>
                <entry key="signaturePropFile" value="alice.properties"/>
                <entry key="passwordCallbackClass" value="org.example.KeystorePasswordCallback"/>
                <entry key="samlCallbackRef" value-ref="stsSamlCallbackHandler"/>
            </map>
        </constructor-arg>
    </bean>
    <bean id="loggingOutInterceptor" class="org.apache.cxf.interceptor.LoggingOutInterceptor"/>
    <bean id="samlCallbackHandler" class="org.example.SamlCallbackHandler">
        <constructor-arg value="true" />
        <constructor-arg value="true" />
        <property name="confirmationMethod" value="urn:oasis:names:tc:SAML:2.0:cm:holder-of-key" />
    </bean>

    <bean id="stsSamlCallbackHandler" class="org.example.StsSamlCallbackHandler"/>
    <bean id="transportSTSProviderBean" class="org.apache.cxf.ws.security.sts.provider.SecurityTokenServiceProvider">
        <property name="issueOperation" ref="transportIssueDelegate"/>
    </bean>
    
    <bean id="transportIssueDelegate" class="org.apache.cxf.sts.operation.TokenIssueOperation">
        <property name="tokenProviders" ref="transportSamlTokenProvider"/>
        <property name="stsProperties" ref="transportSTSProperties"/>
        <property name="claimsManager" ref="claimsManager" />
    </bean>
    <bean id="transportSamlTokenProvider" class="org.apache.cxf.sts.token.provider.SAMLTokenProvider">
    </bean>
    
    <bean id="claimsManager" class="org.apache.cxf.sts.claims.ClaimsManager">
        <property name="claimHandlers" ref="rolesClaimsHandler" />
    </bean>
    
    <bean id="rolesClaimsHandler"
        class="org.example.KeycloakRolesClaimsHandler">
        <property name="address" value="${sso.server}/auth"/>
        <property name="realm" value="fuse7karaf"/>
        <property name="adminUser" value="karafadmin"/>
        <property name="adminPassword" value="karafadmin"/>
    </bean>

    <bean id="transportSTSProperties" class="org.apache.cxf.sts.StaticSTSProperties">
        <property name="signaturePropertiesFile" value="alice.properties"/>
        <property name="signatureUsername" value="alice"/>
        <property name="callbackHandlerClass" value="org.example.KeystorePasswordCallback"/>
        <property name="issuer" value="keycloak"/>
    </bean>
    
    <bean id="utValidator" class="org.example.KeycloakUTValidator">
        <property name="address" value="${sso.server}/auth"/>
        <property name="realm" value="fuse7karaf"/>
    </bean>
    
    <jaxws:endpoint xmlns:ns1="http://docs.oasis-open.org/ws-sx/ws-trust/200512/" 
        id="transportSTS" 
        implementor="#transportSTSProviderBean" 
        address="/UT" 
        wsdlLocation="/ws-trust-1.4-service.wsdl" 
        serviceName="ns1:SecurityTokenService" 
        endpointName="ns1:UT_Port">
        <jaxws:properties>
            <entry key="ws-security.ut.validator" value-ref="utValidator" />
        </jaxws:properties>
    </jaxws:endpoint>
</beans>
